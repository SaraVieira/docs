(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{49:function(e,t,o){e.exports=o.p+"assets/img/playground2.a1940941.png"},50:function(e,t,o){e.exports=o.p+"assets/img/playground1.de0d0870.png"},53:function(e,t,o){e.exports=o.p+"assets/img/rainbows_unicorns.a23880a7.gif"},54:function(e,t,o){e.exports=o.p+"assets/img/particle2.c2ae590c.png"},55:function(e,t,o){e.exports=o.p+"assets/img/particle1.75ca9d9a.png"},56:function(e,t,o){e.exports=o.p+"assets/img/unicorn.bddf5105.jpg"},57:function(e,t,o){e.exports=o.p+"assets/img/particle_build2.003c7d3c.png"},58:function(e,t,o){e.exports=o.p+"assets/img/particle_build.72e09ea4.png"},77:function(e,t,o){"use strict";o.r(t);var n=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"mini-workshop-3-üåàü¶Ñ‚ö°Ô∏èüì±-build-a-rainbow-unicorn-mobile-app-that-lights-up-a-particle-photon-device"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mini-workshop-3-üåàü¶Ñ‚ö°Ô∏èüì±-build-a-rainbow-unicorn-mobile-app-that-lights-up-a-particle-photon-device","aria-hidden":"true"}},[e._v("#")]),e._v(" Mini Workshop 3: üåàü¶Ñ‚ö°Ô∏èüì± Build a Rainbow/Unicorn Mobile App that Lights Up a Particle Photon Device")]),n("table",[n("thead",[n("tr",[n("th",[n("strong",[e._v("Project Goal")])]),n("th",[e._v("Build a NativeScript-Vue mobile app to make a Photon's built-in LED flash different colors based on user selection.")])])]),n("tbody",[n("tr",[n("td",[n("strong",[e._v("What you‚Äôll learn")])]),n("td",[e._v("How to build a mobile app with NativeScript and Vue.js, how to setup and configure a Particle Photon, and how to connect the two so the app controls the device.")])]),n("tr",[n("td",[n("strong",[e._v("Tools you‚Äôll need")])]),n("td",[e._v("Access to Wifi"),n("br"),n("br"),e._v("A modern browser like Chrome."),n("br"),n("br"),e._v("Access to the "),n("a",{attrs:{href:"http://play.nativescript.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript Playground")]),e._v(" - consider creating an account in the Playground to keep the versions of your work intact. A mobile phone (iOS or Android) with the NativeScript Playground and Preview apps installed."),n("br"),n("br"),e._v("The two NativeScript companion apps for the playground (NativeScript Viewer and NativeScript Playground. On Android: "),n("a",{attrs:{href:"https://play.google.com/store/apps/details?id=org.nativescript.play",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript Playground")]),e._v(" and "),n("a",{attrs:{href:"https://play.google.com/store/apps/details?id=org.nativescript.preview",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript Preview")]),e._v(". On iOS: "),n("a",{attrs:{href:"https://itunes.apple.com/us/app/nativescript-playground/id1263543946",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript Playground")]),e._v(" and "),n("a",{attrs:{href:"https://itunes.apple.com/us/app/nativescript-preview/id1264484702",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript Preview")]),n("br"),n("br"),e._v("A "),n("a",{attrs:{href:"https://store.particle.io/collections/photon",target:"_blank",rel:"noopener noreferrer"}},[e._v("Particle Photon device")]),e._v(".")])]),n("tr",[n("td",[n("strong",[e._v("Time needed to complete")])]),n("td",[e._v("60 minutes")])]),n("tr",[n("td",[n("strong",[e._v("Just want to try the app?")])]),n("td",[n("a",{attrs:{href:"https://play.nativescript.org/?template=play-vue&id=E9hBGf&v=21",target:"_blank",rel:"noopener noreferrer"}},[e._v("Open this link in the Playground App")])])])])]),n("h1",{attrs:{id:"instructions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#instructions","aria-hidden":"true"}},[e._v("#")]),e._v(" Instructions")]),n("h2",{attrs:{id:"set-up-your-photon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-up-your-photon","aria-hidden":"true"}},[e._v("#")]),e._v(" Set Up Your Photon")]),n("h3",{attrs:{id:"_1-connect-the-photon-to-wifi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-connect-the-photon-to-wifi","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. Connect the Photon to WiFi:")]),n("p",[e._v("Unbox the kit that comes with this workshop or use your own device, and plug the mini-USB cord into the Photon and to a USB port on your computer. Visit the Photon "),n("a",{attrs:{href:"https://setup.particle.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("setup")]),e._v(" page to set up your device. Click 'Setup a Photon' and 'next' to begin. If you have all the requirements on the next page, click 'next'. Download the local file that is generated to your computer. Open the photonsetup.html file in a browser.")]),n("p",[e._v("Follow the steps listed to connect to the Photon's wifi network. When it connects, it should 'breathe cyan' (the blue light in the center should pulse gently on and off).")]),n("p",[e._v("Next, click 'name your device' and give it a name. Next, you can create an account on for Particle Build, the Photon's special IDE where you keep its code.")]),n("h3",{attrs:{id:"_2-create-a-particle-account-and-learn-about-particle-build"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-create-a-particle-account-and-learn-about-particle-build","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. Create a Particle Account and Learn About Particle Build")]),n("p",[e._v("Create an account "),n("a",{attrs:{href:"https://login.particle.io/login",target:"_blank",rel:"noopener noreferrer"}},[e._v("here")]),e._v(" and then go to "),n("a",{attrs:{href:"https://build.particle.io/build/new",target:"_blank",rel:"noopener noreferrer"}},[e._v("Particle Build")]),e._v(". Click on the third icon from the bottom to see your device listed. Make sure that it is starred - you are going to flash code to this device over wifi.")]),n("p",[e._v("Let's take a look at Particle Build. This is a browser-based IDE that allows you to 'flash', or publish, code from the browser to the Photon device selected on the left.")]),n("p",[n("img",{attrs:{src:o(58),alt:"Particle Build"}})]),n("p",[e._v("Currently, there is nothing in this new file except a setup() and loop() function. Let's start adding code to this file.")]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[e._v("üí°")]),n("p",[e._v("Photons are basically wifi-connected Arduinos, so if you have experience in Arduino development, this code will look familiar. Arduino 'sketches', or firmware that is written to a hardware device, are commonly written in C or C++. We're going to write a bit of C++ to control the central LED light on the device, avoiding any soldering or extra wiring. The Particle kit, however, comes with a few extras, so feel free to explore them more!")])]),n("p",[e._v("Right now, your Photon is lit up in the center LED, and is 'breathing cyan' or pulsing a kind of greenish blue color, if everything is going well. Let's flash some code to it to turn the central light white.")]),n("h3",{attrs:{id:"_3-flash-some-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-flash-some-code","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. Flash Some Code")]),n("p",[e._v("Inside the loop() function's curly brackets, paste the following code:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("RGB.control(true);\n//change its color\nRGB.color(RGB_COLOR_WHITE);\nRGB.control(false);\n")])]),n("p",[e._v("This code uses the Particle API to grab control of the central RGB LED, change its color, then relinquish control.")]),n("p",[e._v("This new file is considered to be an 'app' in Particle Build. You need to give it a name in the left panel before you can flash code to it.")]),n("p",[n("img",{attrs:{src:o(57),alt:"build"}})]),n("p",[e._v("Save your change by clicking the folder icon in the left navigation strip of Particle Build. Above that, click the circled checkmark to 'verify' the code. This basically tests your code to ensure that it can compile. Finally, ensuring that your Photon is starred, click the lightning icon at the top to flash this code to your device. The Photon should update, and then the central LED should turn white. It will stay white because we put the code in the loop function.")]),n("p",[e._v("Tinker a little bit with this snippet. Can you turn the LED red?")]),n("h3",{attrs:{id:"_4-complete-the-photon-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-complete-the-photon-code","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. Complete the Photon Code")]),n("p",[e._v("In our mobile app, we're going to create three 'modes' of LED lights - 'Rainbow Mode' where the LED will flash a rainbow series, 'Unicorn Mode' where the LED flashes alternating blue and white, and a 'stop' mode where the LED stays white.")]),n("p",[e._v("You might have guessed that we're going to put these routines in the loop() function.")]),n("p",[e._v("Add a variable at the top of this file, listing the initial light style to be 0:")]),n("p",[n("code",[e._v("int style = 0;")])]),n("p",[e._v("Then, in the loop() function, overwrite the snippet you just added with the following code:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if(style == 0){\n        RGB.control(true);\n        //change its color\n        RGB.color(RGB_COLOR_WHITE);\n        RGB.control(false);\n    }\n    else if (style == 1){\n        RGB.control(true);\n        //change its color\n        RGB.color(RGB_COLOR_RED);\n        //delay a second\n        delay(500);\n        RGB.color(RGB_COLOR_ORANGE);\n        delay(500);\n        RGB.color(RGB_COLOR_YELLOW);\n        delay(500);\n        RGB.color(RGB_COLOR_GREEN);\n        delay(500);\n        RGB.color(RGB_COLOR_BLUE);\n        delay(500);\n        RGB.color(RGB_COLOR_MAGENTA);\n        delay(500);\n        // resume normal operation\n        RGB.control(false);\n    }\n    else if (style == 2){\n        RGB.control(true);\n        //change its color\n        RGB.color(RGB_COLOR_WHITE);\n        //delay a second\n        delay(500);\n        RGB.color(RGB_COLOR_MAGENTA);\n        delay(500);\n        // resume normal operation\n        RGB.control(false);\n    }\n")])]),n("p",[e._v("Verify this code and flash it to your device. Nothing seems to have changed - and that's because you have your style set to 0, which is still white. Change the integer value to 1, flash it to device, and see what happens. Do you see a rainbow?")]),n("p",[e._v("Now you can return the style to 0 so the LED will initialize white:")]),n("p",[n("code",[e._v("int style = 0;")])]),n("h3",{attrs:{id:"_5-get-ready-for-the-mobile-app-to-use-photon-s-rest-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-get-ready-for-the-mobile-app-to-use-photon-s-rest-api","aria-hidden":"true"}},[e._v("#")]),e._v(" 5. Get Ready for the Mobile App to use Photon's REST API")]),n("p",[e._v("Now, we need to use Photon's cool REST API functionality to allow our mobile app to control the Photon. To do this, add this line to the setup() function, between the curly brackets:")]),n("p",[n("code",[e._v('Particle.function("launchMode",launchMode);')])]),n("p",[e._v("We just added a Particle function called "),n("code",[e._v("launchMode")]),e._v(" that will be available from the mobile app, and will call a similarly-named function in the Photon's code.")]),n("p",[e._v("Add that function under the close of the loop() function:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('int launchMode(String mode) {\n    style = 0;\n    \n    if(mode=="rainbow"){\n        style = 1;\n    }else if(mode=="unicorn"){\n        style = 2;\n    }\n    \n}\n')])]),n("p",[e._v("Now, our mobile app can call the "),n("code",[e._v("launchMode")]),e._v(" Particle Function which will call the internal "),n("code",[e._v("launchMode")]),e._v(" function, passing in a string telling which mode we want to use to dictate the LED flash style.")]),n("p",[e._v("Go ahead and save, verify, then flash this code to your device. The LED should return to white.")]),n("h3",{attrs:{id:"_6-final-photon-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-final-photon-code","aria-hidden":"true"}},[e._v("#")]),e._v(" 6. Final Photon Code")]),n("p",[e._v("The final code looks like this:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('int style = 0;\n\nvoid setup(){\n    Particle.function("launchMode",launchMode);\n}\nvoid loop(){\n    if(style == 0){\n        RGB.control(true);\n        //change its color\n        RGB.color(RGB_COLOR_WHITE);\n        RGB.control(false);\n    }\n    else if (style == 1){\n        RGB.control(true);\n        //change its color\n        RGB.color(RGB_COLOR_RED);\n        //delay a second\n        delay(500);\n        RGB.color(RGB_COLOR_ORANGE);\n        delay(500);\n        RGB.color(RGB_COLOR_YELLOW);\n        delay(500);\n        RGB.color(RGB_COLOR_GREEN);\n        delay(500);\n        RGB.color(RGB_COLOR_BLUE);\n        delay(500);\n        RGB.color(RGB_COLOR_MAGENTA);\n        delay(500);\n        // resume normal operation\n        RGB.control(false);\n    }\n    else if (style == 2){\n        RGB.control(true);\n        //change its color\n        RGB.color(RGB_COLOR_WHITE);\n        //delay a second\n        delay(500);\n        RGB.color(RGB_COLOR_MAGENTA);\n        delay(500);\n        // resume normal operation\n        RGB.control(false);\n    }\n}\n\nint launchMode(String mode) {\n    style = 0;\n    \n    if(mode=="rainbow"){\n        style = 1;\n    }else if(mode=="unicorn"){\n        style = 2;\n    }\n    \n}\n')])]),n("h2",{attrs:{id:"scaffold-your-app"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scaffold-your-app","aria-hidden":"true"}},[e._v("#")]),e._v(" Scaffold your app")]),n("p",[e._v("Now we are going to build an app with NativeScript, using JavaScript to create a native mobile app.")]),n("p",[e._v("Open the "),n("a",{attrs:{href:"http://play.nativescript.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript Playground")]),e._v(" and take a look around. On your first visit, you'll see several 'coach marks' showing where key functionality is kept.")]),n("p",[e._v("Click 'Play Now' to open the main editor. You'll see a QR code appear - scan that with the NativeScript Play app. This allows your phone to refresh automatically as you code. Now you're ready to scaffold a NativeScript-Vue app!")]),n("p",[n("img",{attrs:{src:o(50),alt:"playground"}})]),n("p",[e._v("By default, the first playground app is created using Angular. Click 'new' at the top and choose 'NS-Vue' as a template. You'll get another QR code, so scan that one. You'll see your phone refresh and a basic app appear:")]),n("p",[n("img",{attrs:{src:o(49),alt:"base app"}})]),n("h2",{attrs:{id:"create-the-base-markup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-base-markup","aria-hidden":"true"}},[e._v("#")]),e._v(" Create the Base Markup")]),n("p",[e._v("We're going to use a bit of XML markup in the "),n("code",[e._v("template")]),e._v(" to build out a simple layout with an ActionBar, a SegmentedBar for navigation, and a panel that will change when the SegmentedBar is tapped.")]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[e._v("üí°")]),n("p",[e._v("NativeScript layouts differ from the html you write on the web. You're using NativeScript XML markup, which translates to native UI like GridLayouts and StackLayouts.")])]),n("p",[e._v("Open "),n("code",[e._v("app/components/HelloWorld.vue")]),e._v(" and delete everything between the template's "),n("code",[e._v("<Page>")]),e._v(" tags and add the following:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<ActionBar class="action-bar" title="Awesome Photons!"/>      \n        \n    <StackLayout>\n        <SegmentedBar color="blueviolet" \n              selectedBackgroundColor="blueviolet" class="bar" \n              :items="segmentedBarItems" v-model="selectedBarIndex"  \n                />\n          <StackLayout height="100%" :class="mode"></StackLayout>\n    </StackLayout>\n')])]),n("p",[e._v("The SegmentedBar does not yet appear as the binded values "),n("code",[e._v(":items")]),e._v(" and the "),n("code",[e._v("v-model")]),e._v(" have not yet been set. Find the data block (under the template block) and add values for a SegmentedBar. Also set its default SelectedBarIndex and create a placeholder value for "),n("code",[e._v("mode")]),e._v(". The latter will be used to change the UI when the Bar is tapped:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('data() {\n    return {\n      segmentedBarItems: function () {\n        var segmentedBarModule = require("ui/segmented-bar");\n        let rainbow = new segmentedBarModule.SegmentedBarItem();\n        rainbow.title = "Rainbows";\n        let unicorn = new segmentedBarModule.SegmentedBarItem();\n        unicorn.title = "Unicorns";\n        let stop = new segmentedBarModule.SegmentedBarItem();\n        stop.title = "Stop!";\n        return [rainbow, unicorn, stop];\n      }(),\n      selectedBarIndex: 2,\n      mode: \'\'\n    };\n  },\n')])]),n("p",[e._v("Now, you should be able to see the SegmentedBar appear!")]),n("h2",{attrs:{id:"add-some-css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-some-css","aria-hidden":"true"}},[e._v("#")]),e._v(" Add some CSS")]),n("p",[e._v("NativeScript supports a subset of regular CSS and SASS to style UIs. Let's leverage that to improve our UI.")]),n("p",[e._v("Under the "),n("code",[e._v("<script>")]),e._v(" tags, you'll find a "),n("code",[e._v("<style>")]),e._v(" tag. Overwrite the two styles in this block with the following;")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('.action-bar {\n    color: white;\n    background-color: blueviolet;\n}\n.bar{\n    margin: 20;\n}\n.rainbow {\n    background: linear-gradient(to bottom, red, orange, yellow, green, blue, purple);\n}\n.unicorn{\n    background-image: url("~/images/unicorn.jpg");\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n')])]),n("p",[e._v("We also need to add an image to this project, which will appear when the Unicorn SegmentedBarItem is tapped.")]),n("p",[e._v("Click on the small "),n("code",[e._v("+")]),e._v(" next to the word "),n("code",[e._v("Explorer")]),e._v(" and add a folder titled "),n("code",[e._v("images")]),e._v(". Save the file below to your local, and then upload it as a "),n("code",[e._v(".jpg")]),e._v(" file, using the "),n("code",[e._v("Upload resources")]),e._v(" utility in the dropdown.")]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[e._v("TIP")]),n("p",[e._v("Make sure to rename your file "),n("code",[e._v("unicorn.jpg")]),e._v(" and save it after uploading it.")])]),n("p",[n("img",{attrs:{src:o(56),alt:"A beautiful unicorn!"}})]),n("h2",{attrs:{id:"create-a-method-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-method-1","aria-hidden":"true"}},[e._v("#")]),e._v(" Create A Method (1)")]),n("p",[e._v("We want the UI to change, depending on whether we tap "),n("code",[e._v("Rainbows")]),e._v(", "),n("code",[e._v("Unicorns")]),e._v(", or "),n("code",[e._v("Stop!")]),e._v(".")]),n("p",[e._v("Create a "),n("code",[e._v("methods")]),e._v(" block after the last comma of the "),n("code",[e._v("data")]),e._v(" block to manage the behavior of the SegmentedBar:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("methods: {\n    onSelectedIndexChange(args) {\n      let segmentedBarIndex = args.object.selectedIndex;\n      if (segmentedBarIndex == 0) {\n        this.mode = 'rainbow'\n        //this.launchMode(this.mode);\n      }\n      else if (segmentedBarIndex == 1) {\n        this.mode = 'unicorn'\n        //this.launchMode(this.mode);\n      }\n      else {\n        this.mode = 'stop'\n        //this.launchMode(this.mode);\n      }\n    }\n  }\n")])]),n("p",[e._v("Then, edit the "),n("code",[e._v("<SegmentedBar>")]),e._v(" itself to watch for this method: append @selectedIndexChange to the "),n("code",[e._v("<SegmentedBar>")]),e._v(" markup:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@selectedIndexChange="onSelectedIndexChange($event)" \n')])]),n("p",[e._v("The finished template block now looks like this:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<Page class="page">\n      <ActionBar class="action-bar" title="Awesome Photons!"/>      \n        \n        <StackLayout>\n        <SegmentedBar color="blueviolet" \n              selectedBackgroundColor="blueviolet" class="bar" \n              :items="segmentedBarItems" v-model="selectedBarIndex"\n              @selectedIndexChange="onSelectedIndexChange($event)"  \n                />\n          <StackLayout height="100%" :class="mode"></StackLayout>\n        </StackLayout>\n</Page>\n')])]),n("p",[e._v("Now, when you tap the SegmentedBar, the UI should change.")]),n("h2",{attrs:{id:"connect-your-photon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connect-your-photon","aria-hidden":"true"}},[e._v("#")]),e._v(" Connect Your Photon")]),n("p",[e._v("Now it's finally time to make the Photon light up when you tap the SegmentedBar.")]),n("p",[e._v("At the top of the "),n("code",[e._v("<script>")]),e._v(" block, set some "),n("code",[e._v("const")]),e._v(" values.")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const http = require(\"http\");\nconst baseUrl = 'https://api.particle.io/v1/devices/xxxxx';\nconst token = 'yyyyy';\nconst endpoint = 'launchMode';\n")])]),n("p",[e._v("Let's walk through these. First, we need to make an http call to Particle's REST API, so we need the "),n("code",[e._v("http")]),e._v(" module.")]),n("p",[e._v("Next, you need to tell the REST API which device to call and send it a token. You need to change two values here. Go back to Particle's Build IDE and click on the third icon from the bottom (it looks like a target). Your device ID is here:")]),n("p",[n("img",{attrs:{src:o(55),alt:"Particle IDE"}})]),n("p",[e._v("Copy that value and change the "),n("code",[e._v("xxxxx")]),e._v(" value in the baseUrl const to your device ID.")]),n("p",[e._v("Next, you need a token to use the REST API itself. Click the bottom 'gear' icon in Particle Build and copy the Access Token value, replacing 'yyyyy' with your token.")]),n("p",[n("img",{attrs:{src:o(54),alt:"Particle IDE"}})]),n("p",[e._v("The last value you added is the name of the endpoint you're going to call - remember that Particle function you set above? This is how the mobile app is going to call it.")]),n("h2",{attrs:{id:"create-a-method-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-method-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Create a Method (2)")]),n("p",[e._v("Adding a comma after the closing bracket of the "),n("code",[e._v("onSelectedIndexChange")]),e._v(" call, append a method to call the REST API and make your Photon change color:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("launchMode(mode) {\n      http.request({\n        url: `${baseUrl}/${endpoint}?access_token=${token}`,\n        method: \"POST\",\n        headers: { 'content-type': 'application/json' },\n        content: JSON.stringify({\n          mode: mode\n        })\n      }).then((response) => {\n        console.log(JSON.stringify(response))\n      }, (e) => {\n        alert(\"error\")\n      });\n    }\n")])]),n("p",[e._v("Here, we're making an http request to our baseUrl at the endpoint we set up as a Particle function, passing through a string to tell the function which color sequence to flash.")]),n("p",[e._v("The final thing we need to do is actually call "),n("code",[e._v("launchMode")]),e._v(" when the SegmentedBar is tapped. Go ahead and uncomment the "),n("code",[e._v("//this.launchMode(this.mode)")]),e._v(" code in the "),n("code",[e._v("onSelectedIndexChange")]),e._v(" method.")]),n("p",[e._v("The entire HelloWorld.vue file looks like this:")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n\t<Page>\n      <ActionBar class="action-bar" title="Awesome Photons!"/>      \n        \n      <StackLayout>\n        <SegmentedBar color="blueviolet" \n              selectedBackgroundColor="blueviolet" class="bar" \n              :items="segmentedBarItems" v-model="selectedBarIndex"  \n              @selectedIndexChange="onSelectedIndexChange($event)"  />\n          <StackLayout height="100%" :class="mode"></StackLayout>\n      </StackLayout>\n\t</Page>\n</template>\n    \n<script>\nconst http = require("http");\nconst baseUrl = \'https://api.particle.io/v1/devices/my-device\';\nconst token = \'my-token\';\nconst endpoint = \'launchMode\';\n\ndata() {\n    return {\n      segmentedBarItems: function () {\n        var segmentedBarModule = require("ui/segmented-bar");\n        let rainbow = new segmentedBarModule.SegmentedBarItem();\n        rainbow.title = "Rainbows";\n        let unicorn = new segmentedBarModule.SegmentedBarItem();\n        unicorn.title = "Unicorns";\n        let stop = new segmentedBarModule.SegmentedBarItem();\n        stop.title = "Stop!";\n        return [rainbow, unicorn, stop];\n      }(),\n      selectedBarIndex: 2,\n      mode: \'\'\n    };\n  },\n  \nmethods: {\n    onSelectedIndexChange(args) {\n      let segmentedBarIndex = args.object.selectedIndex;\n      if (segmentedBarIndex == 0) {\n        this.mode = \'rainbow\'\n        this.launchMode(this.mode);\n      }\n      else if (segmentedBarIndex == 1) {\n        this.mode = \'unicorn\'\n        this.launchMode(this.mode);\n      }\n      else {\n        this.mode = \'stop\'\n        this.launchMode(this.mode);\n      }\n    },\n    launchMode(mode) {\n      http.request({\n        url: `${baseUrl}/${endpoint}?access_token=${token}`,\n        method: "POST",\n        headers: { \'content-type\': \'application/json\' },\n        content: JSON.stringify({\n          mode: mode\n        })\n      }).then((response) => {\n        console.log(JSON.stringify(response))\n      }, (e) => {\n        alert("error")\n      });\n    }\n   }\n  }\n<\/script>\n\n<style scoped>\n.action-bar {\n    color: white;\n    background-color: blueviolet;\n}\n.bar{\n    margin: 20;\n}\n.rainbow {\n    background: linear-gradient(to bottom, red, orange, yellow, green, blue, purple);\n}\n.unicorn{\n    background-image: url("~/images/unicorn.jpg");\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n</style>\n\n')])]),n("p",[e._v("Now, if you Photon is connected to wifi with the correct code flashed to it, you can see your gestures in the mobile app light up the Photon's center LED!")]),n("p",[n("img",{attrs:{src:o(53),alt:"rainbows unicorns"}})]),n("p",[e._v("It's really interesting to build Vue.js apps for mobile devices in the NativeScript playground. Now that you know how, what else can you build? Could you extend this app to create different lighting modes?")])])}],a=o(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);t.default=r.exports}}]);